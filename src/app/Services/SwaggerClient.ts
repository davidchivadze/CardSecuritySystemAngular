/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module Api {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAuthService {
    /**
     * @return OK
     */
    login(username: string, password: string): Observable<IResponseOfString>;
}

@Injectable({
    providedIn: 'root'
})
export class AuthService implements IAuthService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    login(username: string, password: string): Observable<IResponseOfString> {
        let url_ = this.baseUrl + "/api/Auth/Login?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfString>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<IResponseOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfString>(<any>null);
    }
}

export interface IEmployeeService {
    /**
     * @return OK
     */
    addEmployee(request: AddEmployeeRequestModel): Observable<IResponseOfAddEmployeeResposeModel>;
    /**
     * @return OK
     */
    deleteEmployee(employeeID: number): Observable<IResponseOfBoolean>;
    /**
     * @param model_employeeID (optional) 
     * @return OK
     */
    getEmployeeHolidayList(model_employeeID: number | null | undefined): Observable<IResponseOfGetEmployeeHolidayListResponse>;
    /**
     * @return OK
     */
    getEmployeeList(): Observable<IResponseOfGetEmployeeListResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class EmployeeService implements IEmployeeService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    addEmployee(request: AddEmployeeRequestModel): Observable<IResponseOfAddEmployeeResposeModel> {
        let url_ = this.baseUrl + "/api/Employee/AddEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployee(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddEmployeeResposeModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddEmployeeResposeModel>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployee(response: HttpResponseBase): Observable<IResponseOfAddEmployeeResposeModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddEmployeeResposeModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddEmployeeResposeModel>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployee(employeeID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployee?";
        if (employeeID === undefined || employeeID === null)
            throw new Error("The parameter 'employeeID' must be defined and cannot be null.");
        else
            url_ += "employeeID=" + encodeURIComponent("" + employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployee(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployee(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @param model_employeeID (optional) 
     * @return OK
     */
    getEmployeeHolidayList(model_employeeID: number | null | undefined): Observable<IResponseOfGetEmployeeHolidayListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeHolidayList?";
        if (model_employeeID !== undefined && model_employeeID !== null)
            url_ += "model.employeeID=" + encodeURIComponent("" + model_employeeID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeHolidayList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeHolidayList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeHolidayListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeHolidayListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeHolidayList(response: HttpResponseBase): Observable<IResponseOfGetEmployeeHolidayListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeHolidayListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeHolidayListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeeList(): Observable<IResponseOfGetEmployeeListResponse> {
        let url_ = this.baseUrl + "/api/Employee/GetEmployeeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeeList(response: HttpResponseBase): Observable<IResponseOfGetEmployeeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeeListResponse>(<any>null);
    }
}

export interface IParametersService {
    /**
     * @return OK
     */
    getGenderList(): Observable<IResponseOfGetGenderListResponse>;
    /**
     * @return OK
     */
    getDepartmentsList(): Observable<IResponseOfGetDepartmentsListResponse>;
    /**
     * @return OK
     */
    addDepartment(model: AddDepartmentRequest): Observable<IResponseOfAddDepartmentResponse>;
    /**
     * @return OK
     */
    editDepartment(model: EditDepartmentRequest): Observable<IResponseOfEditDeparmentResponse>;
    /**
     * @return OK
     */
    getBranchList(): Observable<IResponseOfGetBranchListResponse>;
    /**
     * @return OK
     */
    getBranchForEdit(id: number): Observable<IResponseOfGetBranchListItem>;
    /**
     * @return OK
     */
    deleteBranch(branchID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteDepartment(departmentID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteDevice(deviceID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    deleteEmployeePosition(employeePositionID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    addBranch(model: AddBranchRequest): Observable<IResponseOfAddBranchResponse>;
    /**
     * @return OK
     */
    editBranch(model: EditBranchRequest): Observable<IResponseOfEditBranchResponse>;
    /**
     * @return OK
     */
    getEmployeePositionsList(): Observable<IResponseOfGetEmployeePositionsResponse>;
    /**
     * @return OK
     */
    addEmployeePositionType(model: AddEmployeePositionRequest): Observable<IResponseOfAddEmployeePositionResponse>;
    /**
     * @return OK
     */
    editEmployeePosition(model: EditEmployeePositionRequest): Observable<IResponseOfEditEmployeePositionResponse>;
    /**
     * @return OK
     */
    getSalaryTypesList(): Observable<IResponseOfGetSalaryTypeListResponse>;
    /**
     * @return OK
     */
    addSalaryType(model: AddSalaryTypeRequest): Observable<IResponseOfAddSalaryTypeResponse>;
    /**
     * @return OK
     */
    editSalaryType(model: EditSalaryTypeRequest): Observable<IResponseOfEditSalaryTypeResponse>;
    /**
     * @return OK
     */
    getFineTypesLIst(): Observable<IResponseOfGetFineTypeListResponse>;
    /**
     * @return OK
     */
    addFineType(model: AddFineTypeRequest): Observable<IResponseOfAddFineTypeResponse>;
    /**
     * @return OK
     */
    editFineType(model: EditFineTypeRequest): Observable<IResponseOfEditFineTypeResponse>;
    /**
     * @return OK
     */
    getForgivenessTypesLIst(): Observable<IResponseOfGetForgivenessTypeListResponse>;
    /**
     * @return OK
     */
    getCountryList(): Observable<IResponseOfGetCountryListResponse>;
    /**
     * @return OK
     */
    getCitiesListByCountryID(countryID: number): Observable<IResponseOfGetCitiesListByCountryIDResponse>;
    /**
     * @return OK
     */
    getDeviceTypeList(): Observable<IResponseOfGetDeviceTypeListResponse>;
    /**
     * @return OK
     */
    getDeviceLocationInBranchList(): Observable<IResponseOfGetDeviceLocationInBranchListResponse>;
    /**
     * @return OK
     */
    addDeviceLocationInBranch(model: AddDeviceLocationInBranchRequest): Observable<IResponseOfAddDeviceLocationInBranchResponse>;
    /**
     * @return OK
     */
    editDeviceLocationInBranch(model: EditDeviceLocationInBranchRequest): Observable<IResponseOfEditDeviceLocationInBranchResponse>;
    /**
     * @return OK
     */
    addForgivenessType(model: AddForgivenessTypeRequest): Observable<IResponseOfAddForgivenessTypeResponse>;
    /**
     * @return OK
     */
    editForgivenessType(model: EditForgivenessTypeRequest): Observable<IResponseOfEditForgivenessTypeResponse>;
    /**
     * @return OK
     */
    getHolidayTypeList(): Observable<IResponseOfGetHolidayTypesListResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ParametersService implements IParametersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    getGenderList(): Observable<IResponseOfGetGenderListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetGenderList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGenderList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGenderList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetGenderListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetGenderListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetGenderList(response: HttpResponseBase): Observable<IResponseOfGetGenderListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetGenderListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetGenderListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDepartmentsList(): Observable<IResponseOfGetDepartmentsListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDepartmentsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepartmentsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepartmentsList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDepartmentsListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDepartmentsListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDepartmentsList(response: HttpResponseBase): Observable<IResponseOfGetDepartmentsListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDepartmentsListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDepartmentsListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addDepartment(model: AddDepartmentRequest): Observable<IResponseOfAddDepartmentResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddDepartmentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddDepartmentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddDepartment(response: HttpResponseBase): Observable<IResponseOfAddDepartmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddDepartmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddDepartmentResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editDepartment(model: EditDepartmentRequest): Observable<IResponseOfEditDeparmentResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditDepartment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditDeparmentResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditDeparmentResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditDepartment(response: HttpResponseBase): Observable<IResponseOfEditDeparmentResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditDeparmentResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditDeparmentResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getBranchList(): Observable<IResponseOfGetBranchListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetBranchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetBranchListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetBranchListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetBranchList(response: HttpResponseBase): Observable<IResponseOfGetBranchListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetBranchListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetBranchListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getBranchForEdit(id: number): Observable<IResponseOfGetBranchListItem> {
        let url_ = this.baseUrl + "/api/Parameters/GetBranchForEdit/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBranchForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBranchForEdit(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetBranchListItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetBranchListItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetBranchForEdit(response: HttpResponseBase): Observable<IResponseOfGetBranchListItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetBranchListItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetBranchListItem>(<any>null);
    }

    /**
     * @return OK
     */
    deleteBranch(branchID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteBranch?";
        if (branchID === undefined || branchID === null)
            throw new Error("The parameter 'branchID' must be defined and cannot be null.");
        else
            url_ += "branchID=" + encodeURIComponent("" + branchID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteBranch(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteDepartment(departmentID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteDepartment?";
        if (departmentID === undefined || departmentID === null)
            throw new Error("The parameter 'departmentID' must be defined and cannot be null.");
        else
            url_ += "departmentID=" + encodeURIComponent("" + departmentID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDepartment(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDepartment(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteDevice(deviceID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteDevice?";
        if (deviceID === undefined || deviceID === null)
            throw new Error("The parameter 'deviceID' must be defined and cannot be null.");
        else
            url_ += "DeviceID=" + encodeURIComponent("" + deviceID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    deleteEmployeePosition(employeePositionID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/Parameters/DeleteEmployeePosition?";
        if (employeePositionID === undefined || employeePositionID === null)
            throw new Error("The parameter 'employeePositionID' must be defined and cannot be null.");
        else
            url_ += "employeePositionID=" + encodeURIComponent("" + employeePositionID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployeePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployeePosition(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteEmployeePosition(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    addBranch(model: AddBranchRequest): Observable<IResponseOfAddBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddBranch(response: HttpResponseBase): Observable<IResponseOfAddBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editBranch(model: EditBranchRequest): Observable<IResponseOfEditBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditBranch(response: HttpResponseBase): Observable<IResponseOfEditBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getEmployeePositionsList(): Observable<IResponseOfGetEmployeePositionsResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetEmployeePositionsList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeePositionsList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeePositionsList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetEmployeePositionsResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetEmployeePositionsResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetEmployeePositionsList(response: HttpResponseBase): Observable<IResponseOfGetEmployeePositionsResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetEmployeePositionsResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetEmployeePositionsResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addEmployeePositionType(model: AddEmployeePositionRequest): Observable<IResponseOfAddEmployeePositionResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddEmployeePositionType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddEmployeePositionType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddEmployeePositionType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddEmployeePositionResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddEmployeePositionResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddEmployeePositionType(response: HttpResponseBase): Observable<IResponseOfAddEmployeePositionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddEmployeePositionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddEmployeePositionResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editEmployeePosition(model: EditEmployeePositionRequest): Observable<IResponseOfEditEmployeePositionResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditEmployeePosition";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditEmployeePosition(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditEmployeePosition(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditEmployeePositionResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditEmployeePositionResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditEmployeePosition(response: HttpResponseBase): Observable<IResponseOfEditEmployeePositionResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditEmployeePositionResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditEmployeePositionResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getSalaryTypesList(): Observable<IResponseOfGetSalaryTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetSalaryTypesList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalaryTypesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalaryTypesList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetSalaryTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetSalaryTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetSalaryTypesList(response: HttpResponseBase): Observable<IResponseOfGetSalaryTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetSalaryTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetSalaryTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addSalaryType(model: AddSalaryTypeRequest): Observable<IResponseOfAddSalaryTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddSalaryType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSalaryType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSalaryType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddSalaryTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddSalaryTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddSalaryType(response: HttpResponseBase): Observable<IResponseOfAddSalaryTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddSalaryTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddSalaryTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editSalaryType(model: EditSalaryTypeRequest): Observable<IResponseOfEditSalaryTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditSalaryType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditSalaryType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditSalaryType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditSalaryTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditSalaryTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditSalaryType(response: HttpResponseBase): Observable<IResponseOfEditSalaryTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditSalaryTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditSalaryTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getFineTypesLIst(): Observable<IResponseOfGetFineTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetFineTypesLIst";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFineTypesLIst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFineTypesLIst(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetFineTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetFineTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetFineTypesLIst(response: HttpResponseBase): Observable<IResponseOfGetFineTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetFineTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetFineTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addFineType(model: AddFineTypeRequest): Observable<IResponseOfAddFineTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddFineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddFineType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddFineType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddFineTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddFineTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddFineType(response: HttpResponseBase): Observable<IResponseOfAddFineTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddFineTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddFineTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editFineType(model: EditFineTypeRequest): Observable<IResponseOfEditFineTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditFineType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditFineType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditFineType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditFineTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditFineTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditFineType(response: HttpResponseBase): Observable<IResponseOfEditFineTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditFineTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditFineTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getForgivenessTypesLIst(): Observable<IResponseOfGetForgivenessTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetForgivenessTypesLIst";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForgivenessTypesLIst(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForgivenessTypesLIst(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetForgivenessTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetForgivenessTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetForgivenessTypesLIst(response: HttpResponseBase): Observable<IResponseOfGetForgivenessTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetForgivenessTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetForgivenessTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getCountryList(): Observable<IResponseOfGetCountryListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetCountryList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCountryList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCountryList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetCountryListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetCountryListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCountryList(response: HttpResponseBase): Observable<IResponseOfGetCountryListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetCountryListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetCountryListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getCitiesListByCountryID(countryID: number): Observable<IResponseOfGetCitiesListByCountryIDResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetCitiesListByCountryID?";
        if (countryID === undefined || countryID === null)
            throw new Error("The parameter 'countryID' must be defined and cannot be null.");
        else
            url_ += "countryID=" + encodeURIComponent("" + countryID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCitiesListByCountryID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCitiesListByCountryID(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetCitiesListByCountryIDResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetCitiesListByCountryIDResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetCitiesListByCountryID(response: HttpResponseBase): Observable<IResponseOfGetCitiesListByCountryIDResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetCitiesListByCountryIDResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetCitiesListByCountryIDResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceTypeList(): Observable<IResponseOfGetDeviceTypeListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDeviceTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceTypeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceTypeListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceTypeListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceTypeList(response: HttpResponseBase): Observable<IResponseOfGetDeviceTypeListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceTypeListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceTypeListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceLocationInBranchList(): Observable<IResponseOfGetDeviceLocationInBranchListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetDeviceLocationInBranchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceLocationInBranchList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceLocationInBranchList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceLocationInBranchListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceLocationInBranchListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceLocationInBranchList(response: HttpResponseBase): Observable<IResponseOfGetDeviceLocationInBranchListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceLocationInBranchListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceLocationInBranchListResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addDeviceLocationInBranch(model: AddDeviceLocationInBranchRequest): Observable<IResponseOfAddDeviceLocationInBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddDeviceLocationInBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDeviceLocationInBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDeviceLocationInBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddDeviceLocationInBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddDeviceLocationInBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddDeviceLocationInBranch(response: HttpResponseBase): Observable<IResponseOfAddDeviceLocationInBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddDeviceLocationInBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddDeviceLocationInBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editDeviceLocationInBranch(model: EditDeviceLocationInBranchRequest): Observable<IResponseOfEditDeviceLocationInBranchResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditDeviceLocationInBranch";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditDeviceLocationInBranch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditDeviceLocationInBranch(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditDeviceLocationInBranchResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditDeviceLocationInBranchResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditDeviceLocationInBranch(response: HttpResponseBase): Observable<IResponseOfEditDeviceLocationInBranchResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditDeviceLocationInBranchResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditDeviceLocationInBranchResponse>(<any>null);
    }

    /**
     * @return OK
     */
    addForgivenessType(model: AddForgivenessTypeRequest): Observable<IResponseOfAddForgivenessTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/AddForgivenessType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddForgivenessType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddForgivenessType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfAddForgivenessTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfAddForgivenessTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processAddForgivenessType(response: HttpResponseBase): Observable<IResponseOfAddForgivenessTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfAddForgivenessTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfAddForgivenessTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    editForgivenessType(model: EditForgivenessTypeRequest): Observable<IResponseOfEditForgivenessTypeResponse> {
        let url_ = this.baseUrl + "/api/Parameters/EditForgivenessType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditForgivenessType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditForgivenessType(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfEditForgivenessTypeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfEditForgivenessTypeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processEditForgivenessType(response: HttpResponseBase): Observable<IResponseOfEditForgivenessTypeResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfEditForgivenessTypeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfEditForgivenessTypeResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getHolidayTypeList(): Observable<IResponseOfGetHolidayTypesListResponse> {
        let url_ = this.baseUrl + "/api/Parameters/GetHolidayTypeList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetHolidayTypeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetHolidayTypeList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetHolidayTypesListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetHolidayTypesListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetHolidayTypeList(response: HttpResponseBase): Observable<IResponseOfGetHolidayTypesListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetHolidayTypesListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetHolidayTypesListResponse>(<any>null);
    }
}

export interface IRemoteDeviceService {
    /**
     * @return OK
     */
    getMachineDateTime(): Observable<IResponseOfDateTime>;
    /**
     * @return OK
     */
    addDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getDeviceUserLogList(): Observable<IResponseOfGetDeviceUserLogResponse>;
    /**
     * @return OK
     */
    getDeviceList(): Observable<IResponseOfGetDeviceListResponse>;
    /**
     * @return No Content
     */
    syncUserLog(): Observable<void>;
    /**
     * @return OK
     */
    syncIsRunning(): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    clearDeviceData(): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    updateUserListFromDevice(): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    insertUserToDevice(userID: number): Observable<IResponseOfBoolean>;
    /**
     * @return OK
     */
    getAllUserInfo(machineNumber: number): Observable<UserInfo[]>;
}

@Injectable({
    providedIn: 'root'
})
export class RemoteDeviceService implements IRemoteDeviceService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    getMachineDateTime(): Observable<IResponseOfDateTime> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetMachineDateTime";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMachineDateTime(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMachineDateTime(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfDateTime>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfDateTime>><any>_observableThrow(response_);
        }));
    }

    protected processGetMachineDateTime(response: HttpResponseBase): Observable<IResponseOfDateTime> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfDateTime.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfDateTime>(<any>null);
    }

    /**
     * @return OK
     */
    addDevice(model: AddDeviceRequest): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/AddDevice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processAddDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceUserLogList(): Observable<IResponseOfGetDeviceUserLogResponse> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceUserLogList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceUserLogList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceUserLogList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceUserLogResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceUserLogResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceUserLogList(response: HttpResponseBase): Observable<IResponseOfGetDeviceUserLogResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceUserLogResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceUserLogResponse>(<any>null);
    }

    /**
     * @return OK
     */
    getDeviceList(): Observable<IResponseOfGetDeviceListResponse> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetDeviceList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceList(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfGetDeviceListResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfGetDeviceListResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceList(response: HttpResponseBase): Observable<IResponseOfGetDeviceListResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfGetDeviceListResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfGetDeviceListResponse>(<any>null);
    }

    /**
     * @return No Content
     */
    syncUserLog(): Observable<void> {
        let url_ = this.baseUrl + "/api/RemoteDevice/SyncUserLog";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncUserLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncUserLog(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processSyncUserLog(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @return OK
     */
    syncIsRunning(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/SyncIsRunning";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSyncIsRunning(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSyncIsRunning(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processSyncIsRunning(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    clearDeviceData(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/ClearDeviceData";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processClearDeviceData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processClearDeviceData(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processClearDeviceData(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    updateUserListFromDevice(): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/UpdateUserListFromDevice";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateUserListFromDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateUserListFromDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateUserListFromDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    insertUserToDevice(userID: number): Observable<IResponseOfBoolean> {
        let url_ = this.baseUrl + "/api/RemoteDevice/InsertUserToDevice?";
        if (userID === undefined || userID === null)
            throw new Error("The parameter 'userID' must be defined and cannot be null.");
        else
            url_ += "UserID=" + encodeURIComponent("" + userID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertUserToDevice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertUserToDevice(<any>response_);
                } catch (e) {
                    return <Observable<IResponseOfBoolean>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResponseOfBoolean>><any>_observableThrow(response_);
        }));
    }

    protected processInsertUserToDevice(response: HttpResponseBase): Observable<IResponseOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IResponseOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResponseOfBoolean>(<any>null);
    }

    /**
     * @return OK
     */
    getAllUserInfo(machineNumber: number): Observable<UserInfo[]> {
        let url_ = this.baseUrl + "/api/RemoteDevice/GetAllUserInfo?";
        if (machineNumber === undefined || machineNumber === null)
            throw new Error("The parameter 'machineNumber' must be defined and cannot be null.");
        else
            url_ += "machineNumber=" + encodeURIComponent("" + machineNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUserInfo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUserInfo(<any>response_);
                } catch (e) {
                    return <Observable<UserInfo[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserInfo[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUserInfo(response: HttpResponseBase): Observable<UserInfo[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserInfo.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserInfo[]>(<any>null);
    }
}

export interface IValuesService {
    /**
     * @return OK
     */
    get(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ValuesService implements IValuesService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44376";
    }

    /**
     * @return OK
     */
    get(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Values/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }
}

export class IResponseOfString implements IIResponseOfString {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: string | undefined;

    constructor(data?: IIResponseOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"];
        }
    }

    static fromJS(data: any): IResponseOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data;
        return data; 
    }
}

export interface IIResponseOfString {
    ok: boolean;
    errors?: string[] | undefined;
    data?: string | undefined;
}

export class AddEmployeeRequestModel implements IAddEmployeeRequestModel {
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;

    constructor(data?: IAddEmployeeRequestModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firsName = _data["FirsName"];
            this.firsName_ka = _data["FirsName_ka"];
            this.firsName_ru = _data["FirsName_ru"];
            this.lastName = _data["LastName"];
            this.lastName_ka = _data["LastName_ka"];
            this.lastName_ru = _data["LastName_ru"];
            this.country = _data["Country"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.address = _data["Address"];
            this.address_ka = _data["Address_ka"];
            this.address_ru = _data["Address_ru"];
            this.email = _data["Email"];
            this.isActive = _data["IsActive"];
            this.employeePositionID = _data["EmployeePositionID"];
            this.deviceCardID = _data["DeviceCardID"];
            this.salaryID = _data["SalaryID"];
            this.branchID = _data["BranchID"];
            this.departmentID = _data["DepartmentID"];
            this.genderID = _data["GenderID"];
            this.personalNumber = _data["PersonalNumber"];
            if (Array.isArray(_data["MobileNumbers"])) {
                this.mobileNumbers = [] as any;
                for (let item of _data["MobileNumbers"])
                    this.mobileNumbers!.push(item);
            }
            this.forgiveness = _data["Forgiveness"] ? Forgiveness.fromJS(_data["Forgiveness"]) : <any>undefined;
            this.fine = _data["Fine"] ? Fine.fromJS(_data["Fine"]) : <any>undefined;
            this.salary = _data["Salary"] ? SalaryData.fromJS(_data["Salary"]) : <any>undefined;
            this.schedule = _data["Schedule"] ? ScheduleData.fromJS(_data["Schedule"]) : <any>undefined;
            if (Array.isArray(_data["EmployeeHolidays"])) {
                this.employeeHolidays = [] as any;
                for (let item of _data["EmployeeHolidays"])
                    this.employeeHolidays!.push(EmployeeHolidays.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddEmployeeRequestModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeRequestModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirsName"] = this.firsName;
        data["FirsName_ka"] = this.firsName_ka;
        data["FirsName_ru"] = this.firsName_ru;
        data["LastName"] = this.lastName;
        data["LastName_ka"] = this.lastName_ka;
        data["LastName_ru"] = this.lastName_ru;
        data["Country"] = this.country;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Address"] = this.address;
        data["Address_ka"] = this.address_ka;
        data["Address_ru"] = this.address_ru;
        data["Email"] = this.email;
        data["IsActive"] = this.isActive;
        data["EmployeePositionID"] = this.employeePositionID;
        data["DeviceCardID"] = this.deviceCardID;
        data["SalaryID"] = this.salaryID;
        data["BranchID"] = this.branchID;
        data["DepartmentID"] = this.departmentID;
        data["GenderID"] = this.genderID;
        data["PersonalNumber"] = this.personalNumber;
        if (Array.isArray(this.mobileNumbers)) {
            data["MobileNumbers"] = [];
            for (let item of this.mobileNumbers)
                data["MobileNumbers"].push(item);
        }
        data["Forgiveness"] = this.forgiveness ? this.forgiveness.toJSON() : <any>undefined;
        data["Fine"] = this.fine ? this.fine.toJSON() : <any>undefined;
        data["Salary"] = this.salary ? this.salary.toJSON() : <any>undefined;
        data["Schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        if (Array.isArray(this.employeeHolidays)) {
            data["EmployeeHolidays"] = [];
            for (let item of this.employeeHolidays)
                data["EmployeeHolidays"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IAddEmployeeRequestModel {
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePositionID?: number | undefined;
    deviceCardID?: string | undefined;
    salaryID?: number | undefined;
    branchID?: number | undefined;
    departmentID?: number | undefined;
    genderID?: number | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: Forgiveness | undefined;
    fine?: Fine | undefined;
    salary?: SalaryData | undefined;
    schedule?: ScheduleData | undefined;
    employeeHolidays?: EmployeeHolidays[] | undefined;
}

export class Forgiveness implements IForgiveness {
    forgivenessTypeID?: number | undefined;
    amount?: number | undefined;

    constructor(data?: IForgiveness) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.forgivenessTypeID = _data["ForgivenessTypeID"];
            this.amount = _data["Amount"];
        }
    }

    static fromJS(data: any): Forgiveness {
        data = typeof data === 'object' ? data : {};
        let result = new Forgiveness();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ForgivenessTypeID"] = this.forgivenessTypeID;
        data["Amount"] = this.amount;
        return data; 
    }
}

export interface IForgiveness {
    forgivenessTypeID?: number | undefined;
    amount?: number | undefined;
}

export class Fine implements IFine {
    fineTypeID?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;

    constructor(data?: IFine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fineTypeID = _data["FineTypeID"];
            this.amount = _data["Amount"];
            this.currencyID = _data["CurrencyID"];
        }
    }

    static fromJS(data: any): Fine {
        data = typeof data === 'object' ? data : {};
        let result = new Fine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FineTypeID"] = this.fineTypeID;
        data["Amount"] = this.amount;
        data["CurrencyID"] = this.currencyID;
        return data; 
    }
}

export interface IFine {
    fineTypeID?: number | undefined;
    amount?: number | undefined;
    currencyID?: number | undefined;
}

export class SalaryData implements ISalaryData {
    amount?: number | undefined;
    currencyID?: number | undefined;
    isHourly?: boolean | undefined;
    salaryTypeID?: number | undefined;

    constructor(data?: ISalaryData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["Amount"];
            this.currencyID = _data["CurrencyID"];
            this.isHourly = _data["IsHourly"];
            this.salaryTypeID = _data["SalaryTypeID"];
        }
    }

    static fromJS(data: any): SalaryData {
        data = typeof data === 'object' ? data : {};
        let result = new SalaryData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Amount"] = this.amount;
        data["CurrencyID"] = this.currencyID;
        data["IsHourly"] = this.isHourly;
        data["SalaryTypeID"] = this.salaryTypeID;
        return data; 
    }
}

export interface ISalaryData {
    amount?: number | undefined;
    currencyID?: number | undefined;
    isHourly?: boolean | undefined;
    salaryTypeID?: number | undefined;
}

export class ScheduleData implements IScheduleData {
    scheduleTypeID?: number | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
    notStandartSchedule?: boolean | undefined;
    scheduleFileData?: string | undefined;
    fileFormat?: string | undefined;

    constructor(data?: IScheduleData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.scheduleTypeID = _data["ScheduleTypeID"];
            this.startTime = _data["StartTime"];
            this.endTime = _data["EndTime"];
            this.weekHouresAmount = _data["WeekHouresAmount"];
            this.daylyHouresAmount = _data["DaylyHouresAmount"];
            this.onWorkingDaysOnly = _data["OnWorkingDaysOnly"];
            this.onWorkingHouresOnly = _data["OnWorkingHouresOnly"];
            this.notStandartSchedule = _data["NotStandartSchedule"];
            this.scheduleFileData = _data["ScheduleFileData"];
            this.fileFormat = _data["FileFormat"];
        }
    }

    static fromJS(data: any): ScheduleData {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ScheduleTypeID"] = this.scheduleTypeID;
        data["StartTime"] = this.startTime;
        data["EndTime"] = this.endTime;
        data["WeekHouresAmount"] = this.weekHouresAmount;
        data["DaylyHouresAmount"] = this.daylyHouresAmount;
        data["OnWorkingDaysOnly"] = this.onWorkingDaysOnly;
        data["OnWorkingHouresOnly"] = this.onWorkingHouresOnly;
        data["NotStandartSchedule"] = this.notStandartSchedule;
        data["ScheduleFileData"] = this.scheduleFileData;
        data["FileFormat"] = this.fileFormat;
        return data; 
    }
}

export interface IScheduleData {
    scheduleTypeID?: number | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    weekHouresAmount?: number | undefined;
    daylyHouresAmount?: number | undefined;
    onWorkingDaysOnly?: boolean | undefined;
    onWorkingHouresOnly?: boolean | undefined;
    notStandartSchedule?: boolean | undefined;
    scheduleFileData?: string | undefined;
    fileFormat?: string | undefined;
}

export class EmployeeHolidays implements IEmployeeHolidays {
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IEmployeeHolidays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.holidayTypeID = _data["HolidayTypeID"];
            this.allWritten = _data["AllWritten"];
            this.left = _data["Left"];
            this.used = _data["Used"];
            this.numInYear = _data["NumInYear"];
            this.leftInYear = _data["LeftInYear"];
            this.deactivateDate = _data["DeactivateDate"] ? new Date(_data["DeactivateDate"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): EmployeeHolidays {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeHolidays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["HolidayTypeID"] = this.holidayTypeID;
        data["AllWritten"] = this.allWritten;
        data["Left"] = this.left;
        data["Used"] = this.used;
        data["NumInYear"] = this.numInYear;
        data["LeftInYear"] = this.leftInYear;
        data["DeactivateDate"] = this.deactivateDate ? this.deactivateDate.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IEmployeeHolidays {
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfAddEmployeeResposeModel implements IIResponseOfAddEmployeeResposeModel {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeResposeModel | undefined;

    constructor(data?: IIResponseOfAddEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddEmployeeResposeModel.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddEmployeeResposeModel {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeeResposeModel | undefined;
}

export class AddEmployeeResposeModel implements IAddEmployeeResposeModel {

    constructor(data?: IAddEmployeeResposeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddEmployeeResposeModel {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeeResposeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddEmployeeResposeModel {
}

export class IResponseOfBoolean implements IIResponseOfBoolean {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: boolean | undefined;

    constructor(data?: IIResponseOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"];
        }
    }

    static fromJS(data: any): IResponseOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data;
        return data; 
    }
}

export interface IIResponseOfBoolean {
    ok: boolean;
    errors?: string[] | undefined;
    data?: boolean | undefined;
}

export class GetEmployeeHolidayListRequest implements IGetEmployeeHolidayListRequest {
    employeeID?: number | undefined;

    constructor(data?: IGetEmployeeHolidayListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IGetEmployeeHolidayListRequest {
    employeeID?: number | undefined;
}

export class IResponseOfGetEmployeeHolidayListResponse implements IIResponseOfGetEmployeeHolidayListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayListResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeHolidayListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeHolidayListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeHolidayListResponse | undefined;
}

export class GetEmployeeHolidayListResponse implements IGetEmployeeHolidayListResponse {
    getEmployeeHolidayList?: GetEmployeeHolidayListItem[] | undefined;

    constructor(data?: IGetEmployeeHolidayListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeHolidayList"])) {
                this.getEmployeeHolidayList = [] as any;
                for (let item of _data["GetEmployeeHolidayList"])
                    this.getEmployeeHolidayList!.push(GetEmployeeHolidayListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeHolidayList)) {
            data["GetEmployeeHolidayList"] = [];
            for (let item of this.getEmployeeHolidayList)
                data["GetEmployeeHolidayList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeHolidayListResponse {
    getEmployeeHolidayList?: GetEmployeeHolidayListItem[] | undefined;
}

export class GetEmployeeHolidayListItem implements IGetEmployeeHolidayListItem {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
    employeeID?: number | undefined;

    constructor(data?: IGetEmployeeHolidayListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.holidayTypeID = _data["HolidayTypeID"];
            this.allWritten = _data["AllWritten"];
            this.left = _data["Left"];
            this.used = _data["Used"];
            this.numInYear = _data["NumInYear"];
            this.leftInYear = _data["LeftInYear"];
            this.deactivateDate = _data["DeactivateDate"] ? new Date(_data["DeactivateDate"].toString()) : <any>undefined;
            this.isActive = _data["IsActive"];
            this.employeeID = _data["EmployeeID"];
        }
    }

    static fromJS(data: any): GetEmployeeHolidayListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeHolidayListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["HolidayTypeID"] = this.holidayTypeID;
        data["AllWritten"] = this.allWritten;
        data["Left"] = this.left;
        data["Used"] = this.used;
        data["NumInYear"] = this.numInYear;
        data["LeftInYear"] = this.leftInYear;
        data["DeactivateDate"] = this.deactivateDate ? this.deactivateDate.toISOString() : <any>undefined;
        data["IsActive"] = this.isActive;
        data["EmployeeID"] = this.employeeID;
        return data; 
    }
}

export interface IGetEmployeeHolidayListItem {
    iD?: number | undefined;
    holidayTypeID?: number | undefined;
    allWritten?: number | undefined;
    left?: number | undefined;
    used?: number | undefined;
    numInYear?: number | undefined;
    leftInYear?: number | undefined;
    deactivateDate?: Date | undefined;
    isActive?: boolean | undefined;
    employeeID?: number | undefined;
}

export class IResponseOfGetEmployeeListResponse implements IIResponseOfGetEmployeeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeListResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeeListResponse | undefined;
}

export class GetEmployeeListResponse implements IGetEmployeeListResponse {
    getEmployeeList?: GetEmployeeListItem[] | undefined;

    constructor(data?: IGetEmployeeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GetEmployeeList"])) {
                this.getEmployeeList = [] as any;
                for (let item of _data["GetEmployeeList"])
                    this.getEmployeeList!.push(GetEmployeeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeeList)) {
            data["GetEmployeeList"] = [];
            for (let item of this.getEmployeeList)
                data["GetEmployeeList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeeListResponse {
    getEmployeeList?: GetEmployeeListItem[] | undefined;
}

export class GetEmployeeListItem implements IGetEmployeeListItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePosition?: string | undefined;
    deviceCardID?: string | undefined;
    userIDInDevice?: number | undefined;
    branchName?: string | undefined;
    departmentName?: string | undefined;
    gender?: string | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: number | undefined;
    fine?: number | undefined;
    salary?: number | undefined;

    constructor(data?: IGetEmployeeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.firsName = _data["FirsName"];
            this.firsName_ka = _data["FirsName_ka"];
            this.firsName_ru = _data["FirsName_ru"];
            this.lastName = _data["LastName"];
            this.lastName_ka = _data["LastName_ka"];
            this.lastName_ru = _data["LastName_ru"];
            this.country = _data["Country"];
            this.dateOfBirth = _data["DateOfBirth"] ? new Date(_data["DateOfBirth"].toString()) : <any>undefined;
            this.address = _data["Address"];
            this.address_ka = _data["Address_ka"];
            this.address_ru = _data["Address_ru"];
            this.email = _data["Email"];
            this.isActive = _data["IsActive"];
            this.employeePosition = _data["EmployeePosition"];
            this.deviceCardID = _data["DeviceCardID"];
            this.userIDInDevice = _data["UserIDInDevice"];
            this.branchName = _data["BranchName"];
            this.departmentName = _data["DepartmentName"];
            this.gender = _data["Gender"];
            this.personalNumber = _data["PersonalNumber"];
            if (Array.isArray(_data["MobileNumbers"])) {
                this.mobileNumbers = [] as any;
                for (let item of _data["MobileNumbers"])
                    this.mobileNumbers!.push(item);
            }
            this.forgiveness = _data["Forgiveness"];
            this.fine = _data["Fine"];
            this.salary = _data["Salary"];
        }
    }

    static fromJS(data: any): GetEmployeeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["FirsName"] = this.firsName;
        data["FirsName_ka"] = this.firsName_ka;
        data["FirsName_ru"] = this.firsName_ru;
        data["LastName"] = this.lastName;
        data["LastName_ka"] = this.lastName_ka;
        data["LastName_ru"] = this.lastName_ru;
        data["Country"] = this.country;
        data["DateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : <any>undefined;
        data["Address"] = this.address;
        data["Address_ka"] = this.address_ka;
        data["Address_ru"] = this.address_ru;
        data["Email"] = this.email;
        data["IsActive"] = this.isActive;
        data["EmployeePosition"] = this.employeePosition;
        data["DeviceCardID"] = this.deviceCardID;
        data["UserIDInDevice"] = this.userIDInDevice;
        data["BranchName"] = this.branchName;
        data["DepartmentName"] = this.departmentName;
        data["Gender"] = this.gender;
        data["PersonalNumber"] = this.personalNumber;
        if (Array.isArray(this.mobileNumbers)) {
            data["MobileNumbers"] = [];
            for (let item of this.mobileNumbers)
                data["MobileNumbers"].push(item);
        }
        data["Forgiveness"] = this.forgiveness;
        data["Fine"] = this.fine;
        data["Salary"] = this.salary;
        return data; 
    }
}

export interface IGetEmployeeListItem {
    iD?: number | undefined;
    firsName?: string | undefined;
    firsName_ka?: string | undefined;
    firsName_ru?: string | undefined;
    lastName?: string | undefined;
    lastName_ka?: string | undefined;
    lastName_ru?: string | undefined;
    country?: string | undefined;
    dateOfBirth?: Date | undefined;
    address?: string | undefined;
    address_ka?: string | undefined;
    address_ru?: string | undefined;
    email?: string | undefined;
    isActive?: boolean | undefined;
    employeePosition?: string | undefined;
    deviceCardID?: string | undefined;
    userIDInDevice?: number | undefined;
    branchName?: string | undefined;
    departmentName?: string | undefined;
    gender?: string | undefined;
    personalNumber?: string | undefined;
    mobileNumbers?: string[] | undefined;
    forgiveness?: number | undefined;
    fine?: number | undefined;
    salary?: number | undefined;
}

export class IResponseOfGetGenderListResponse implements IIResponseOfGetGenderListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetGenderListResponse | undefined;

    constructor(data?: IIResponseOfGetGenderListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetGenderListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetGenderListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetGenderListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetGenderListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetGenderListResponse | undefined;
}

export class GetGenderListResponse implements IGetGenderListResponse {
    genderList?: GetGenderListItem[] | undefined;

    constructor(data?: IGetGenderListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["GenderList"])) {
                this.genderList = [] as any;
                for (let item of _data["GenderList"])
                    this.genderList!.push(GetGenderListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetGenderListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.genderList)) {
            data["GenderList"] = [];
            for (let item of this.genderList)
                data["GenderList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetGenderListResponse {
    genderList?: GetGenderListItem[] | undefined;
}

export class GetGenderListItem implements IGetGenderListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetGenderListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetGenderListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetGenderListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetGenderListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDepartmentsListResponse implements IIResponseOfGetDepartmentsListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDepartmentsListResponse | undefined;

    constructor(data?: IIResponseOfGetDepartmentsListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDepartmentsListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDepartmentsListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDepartmentsListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDepartmentsListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDepartmentsListResponse | undefined;
}

export class GetDepartmentsListResponse implements IGetDepartmentsListResponse {
    departmentsList?: GetDepartmentsListItem[] | undefined;

    constructor(data?: IGetDepartmentsListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DepartmentsList"])) {
                this.departmentsList = [] as any;
                for (let item of _data["DepartmentsList"])
                    this.departmentsList!.push(GetDepartmentsListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDepartmentsListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.departmentsList)) {
            data["DepartmentsList"] = [];
            for (let item of this.departmentsList)
                data["DepartmentsList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDepartmentsListResponse {
    departmentsList?: GetDepartmentsListItem[] | undefined;
}

export class GetDepartmentsListItem implements IGetDepartmentsListItem {
    iD?: number | undefined;
    description?: string | undefined;
    parentDescription?: string | undefined;
    isActive?: boolean | undefined;
    parentID?: number | undefined;

    constructor(data?: IGetDepartmentsListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.parentDescription = _data["ParentDescription"];
            this.isActive = _data["IsActive"];
            this.parentID = _data["ParentID"];
        }
    }

    static fromJS(data: any): GetDepartmentsListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDepartmentsListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["ParentDescription"] = this.parentDescription;
        data["IsActive"] = this.isActive;
        data["ParentID"] = this.parentID;
        return data; 
    }
}

export interface IGetDepartmentsListItem {
    iD?: number | undefined;
    description?: string | undefined;
    parentDescription?: string | undefined;
    isActive?: boolean | undefined;
    parentID?: number | undefined;
}

export class AddDepartmentRequest implements IAddDepartmentRequest {
    parentDepartmentID?: number | undefined;
    description?: string | undefined;

    constructor(data?: IAddDepartmentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentDepartmentID = _data["ParentDepartmentID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddDepartmentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDepartmentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ParentDepartmentID"] = this.parentDepartmentID;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddDepartmentRequest {
    parentDepartmentID?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfAddDepartmentResponse implements IIResponseOfAddDepartmentResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddDepartmentResponse | undefined;

    constructor(data?: IIResponseOfAddDepartmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddDepartmentResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddDepartmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddDepartmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddDepartmentResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddDepartmentResponse | undefined;
}

export class AddDepartmentResponse implements IAddDepartmentResponse {

    constructor(data?: IAddDepartmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddDepartmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddDepartmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddDepartmentResponse {
}

export class EditDepartmentRequest implements IEditDepartmentRequest {
    iD?: number | undefined;
    description?: string | undefined;
    parentDepartmentID?: number | undefined;

    constructor(data?: IEditDepartmentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.parentDepartmentID = _data["ParentDepartmentID"];
        }
    }

    static fromJS(data: any): EditDepartmentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditDepartmentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["ParentDepartmentID"] = this.parentDepartmentID;
        return data; 
    }
}

export interface IEditDepartmentRequest {
    iD?: number | undefined;
    description?: string | undefined;
    parentDepartmentID?: number | undefined;
}

export class IResponseOfEditDeparmentResponse implements IIResponseOfEditDeparmentResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditDeparmentResponse | undefined;

    constructor(data?: IIResponseOfEditDeparmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditDeparmentResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditDeparmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditDeparmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditDeparmentResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditDeparmentResponse | undefined;
}

export class EditDeparmentResponse implements IEditDeparmentResponse {

    constructor(data?: IEditDeparmentResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditDeparmentResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeparmentResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditDeparmentResponse {
}

export class IResponseOfGetBranchListResponse implements IIResponseOfGetBranchListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListResponse | undefined;

    constructor(data?: IIResponseOfGetBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetBranchListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetBranchListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListResponse | undefined;
}

export class GetBranchListResponse implements IGetBranchListResponse {
    branchList?: GetBranchListItem[] | undefined;

    constructor(data?: IGetBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["BranchList"])) {
                this.branchList = [] as any;
                for (let item of _data["BranchList"])
                    this.branchList!.push(GetBranchListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.branchList)) {
            data["BranchList"] = [];
            for (let item of this.branchList)
                data["BranchList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetBranchListResponse {
    branchList?: GetBranchListItem[] | undefined;
}

export class GetBranchListItem implements IGetBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    country?: string | undefined;
    countryID?: number | undefined;
    city?: string | undefined;
    cityID?: number | undefined;
    address?: string | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.country = _data["Country"];
            this.countryID = _data["CountryID"];
            this.city = _data["City"];
            this.cityID = _data["CityID"];
            this.address = _data["Address"];
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): GetBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["Country"] = this.country;
        data["CountryID"] = this.countryID;
        data["City"] = this.city;
        data["CityID"] = this.cityID;
        data["Address"] = this.address;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IGetBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    country?: string | undefined;
    countryID?: number | undefined;
    city?: string | undefined;
    cityID?: number | undefined;
    address?: string | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfGetBranchListItem implements IIResponseOfGetBranchListItem {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListItem | undefined;

    constructor(data?: IIResponseOfGetBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetBranchListItem.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetBranchListItem {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetBranchListItem | undefined;
}

export class AddBranchRequest implements IAddBranchRequest {
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;

    constructor(data?: IAddBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.branchName = _data["BranchName"];
            this.cityID = _data["CityID"];
            this.countryID = _data["CountryID"];
            this.address = _data["Address"];
        }
    }

    static fromJS(data: any): AddBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["BranchName"] = this.branchName;
        data["CityID"] = this.cityID;
        data["CountryID"] = this.countryID;
        data["Address"] = this.address;
        return data; 
    }
}

export interface IAddBranchRequest {
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;
}

export class IResponseOfAddBranchResponse implements IIResponseOfAddBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddBranchResponse | undefined;

    constructor(data?: IIResponseOfAddBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddBranchResponse | undefined;
}

export class AddBranchResponse implements IAddBranchResponse {

    constructor(data?: IAddBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddBranchResponse {
}

export class EditBranchRequest implements IEditBranchRequest {
    iD?: number | undefined;
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;

    constructor(data?: IEditBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.branchName = _data["BranchName"];
            this.cityID = _data["CityID"];
            this.countryID = _data["CountryID"];
            this.address = _data["Address"];
        }
    }

    static fromJS(data: any): EditBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["BranchName"] = this.branchName;
        data["CityID"] = this.cityID;
        data["CountryID"] = this.countryID;
        data["Address"] = this.address;
        return data; 
    }
}

export interface IEditBranchRequest {
    iD?: number | undefined;
    branchName?: string | undefined;
    cityID?: number | undefined;
    countryID?: number | undefined;
    address?: string | undefined;
}

export class IResponseOfEditBranchResponse implements IIResponseOfEditBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditBranchResponse | undefined;

    constructor(data?: IIResponseOfEditBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditBranchResponse | undefined;
}

export class EditBranchResponse implements IEditBranchResponse {

    constructor(data?: IEditBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditBranchResponse {
}

export class IResponseOfGetEmployeePositionsResponse implements IIResponseOfGetEmployeePositionsResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeePositionsResponse | undefined;

    constructor(data?: IIResponseOfGetEmployeePositionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetEmployeePositionsResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetEmployeePositionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetEmployeePositionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetEmployeePositionsResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetEmployeePositionsResponse | undefined;
}

export class GetEmployeePositionsResponse implements IGetEmployeePositionsResponse {
    getEmployeePositionsList?: GetEmployeePositionsListItem[] | undefined;

    constructor(data?: IGetEmployeePositionsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["getEmployeePositionsList"])) {
                this.getEmployeePositionsList = [] as any;
                for (let item of _data["getEmployeePositionsList"])
                    this.getEmployeePositionsList!.push(GetEmployeePositionsListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetEmployeePositionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeePositionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getEmployeePositionsList)) {
            data["getEmployeePositionsList"] = [];
            for (let item of this.getEmployeePositionsList)
                data["getEmployeePositionsList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetEmployeePositionsResponse {
    getEmployeePositionsList?: GetEmployeePositionsListItem[] | undefined;
}

export class GetEmployeePositionsListItem implements IGetEmployeePositionsListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetEmployeePositionsListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetEmployeePositionsListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeePositionsListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetEmployeePositionsListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddEmployeePositionRequest implements IAddEmployeePositionRequest {
    description?: string | undefined;

    constructor(data?: IAddEmployeePositionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddEmployeePositionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeePositionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddEmployeePositionRequest {
    description?: string | undefined;
}

export class IResponseOfAddEmployeePositionResponse implements IIResponseOfAddEmployeePositionResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeePositionResponse | undefined;

    constructor(data?: IIResponseOfAddEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddEmployeePositionResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddEmployeePositionResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddEmployeePositionResponse | undefined;
}

export class AddEmployeePositionResponse implements IAddEmployeePositionResponse {

    constructor(data?: IAddEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddEmployeePositionResponse {
}

export class EditEmployeePositionRequest implements IEditEmployeePositionRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditEmployeePositionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditEmployeePositionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeePositionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditEmployeePositionRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditEmployeePositionResponse implements IIResponseOfEditEmployeePositionResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeePositionResponse | undefined;

    constructor(data?: IIResponseOfEditEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditEmployeePositionResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditEmployeePositionResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditEmployeePositionResponse | undefined;
}

export class EditEmployeePositionResponse implements IEditEmployeePositionResponse {

    constructor(data?: IEditEmployeePositionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditEmployeePositionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditEmployeePositionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditEmployeePositionResponse {
}

export class IResponseOfGetSalaryTypeListResponse implements IIResponseOfGetSalaryTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetSalaryTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetSalaryTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetSalaryTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetSalaryTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetSalaryTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetSalaryTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetSalaryTypeListResponse | undefined;
}

export class GetSalaryTypeListResponse implements IGetSalaryTypeListResponse {
    salaryTypes?: GetSalaryTypeListItem[] | undefined;

    constructor(data?: IGetSalaryTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["SalaryTypes"])) {
                this.salaryTypes = [] as any;
                for (let item of _data["SalaryTypes"])
                    this.salaryTypes!.push(GetSalaryTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSalaryTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalaryTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.salaryTypes)) {
            data["SalaryTypes"] = [];
            for (let item of this.salaryTypes)
                data["SalaryTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetSalaryTypeListResponse {
    salaryTypes?: GetSalaryTypeListItem[] | undefined;
}

export class GetSalaryTypeListItem implements IGetSalaryTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetSalaryTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetSalaryTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetSalaryTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetSalaryTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddSalaryTypeRequest implements IAddSalaryTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddSalaryTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddSalaryTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalaryTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddSalaryTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddSalaryTypeResponse implements IIResponseOfAddSalaryTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddSalaryTypeResponse | undefined;

    constructor(data?: IIResponseOfAddSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddSalaryTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddSalaryTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddSalaryTypeResponse | undefined;
}

export class AddSalaryTypeResponse implements IAddSalaryTypeResponse {

    constructor(data?: IAddSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddSalaryTypeResponse {
}

export class EditSalaryTypeRequest implements IEditSalaryTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditSalaryTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditSalaryTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditSalaryTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditSalaryTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditSalaryTypeResponse implements IIResponseOfEditSalaryTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditSalaryTypeResponse | undefined;

    constructor(data?: IIResponseOfEditSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditSalaryTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditSalaryTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditSalaryTypeResponse | undefined;
}

export class EditSalaryTypeResponse implements IEditSalaryTypeResponse {

    constructor(data?: IEditSalaryTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditSalaryTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditSalaryTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditSalaryTypeResponse {
}

export class IResponseOfGetFineTypeListResponse implements IIResponseOfGetFineTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetFineTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetFineTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetFineTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetFineTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetFineTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetFineTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetFineTypeListResponse | undefined;
}

export class GetFineTypeListResponse implements IGetFineTypeListResponse {
    fineTypes?: GetFineTypeListItem[] | undefined;

    constructor(data?: IGetFineTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["FineTypes"])) {
                this.fineTypes = [] as any;
                for (let item of _data["FineTypes"])
                    this.fineTypes!.push(GetFineTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetFineTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetFineTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fineTypes)) {
            data["FineTypes"] = [];
            for (let item of this.fineTypes)
                data["FineTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetFineTypeListResponse {
    fineTypes?: GetFineTypeListItem[] | undefined;
}

export class GetFineTypeListItem implements IGetFineTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetFineTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetFineTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetFineTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetFineTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class AddFineTypeRequest implements IAddFineTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddFineTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddFineTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddFineTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddFineTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddFineTypeResponse implements IIResponseOfAddFineTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddFineTypeResponse | undefined;

    constructor(data?: IIResponseOfAddFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddFineTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddFineTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddFineTypeResponse | undefined;
}

export class AddFineTypeResponse implements IAddFineTypeResponse {

    constructor(data?: IAddFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddFineTypeResponse {
}

export class EditFineTypeRequest implements IEditFineTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditFineTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditFineTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditFineTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditFineTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditFineTypeResponse implements IIResponseOfEditFineTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditFineTypeResponse | undefined;

    constructor(data?: IIResponseOfEditFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditFineTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditFineTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditFineTypeResponse | undefined;
}

export class EditFineTypeResponse implements IEditFineTypeResponse {

    constructor(data?: IEditFineTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditFineTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditFineTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditFineTypeResponse {
}

export class IResponseOfGetForgivenessTypeListResponse implements IIResponseOfGetForgivenessTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetForgivenessTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetForgivenessTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetForgivenessTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetForgivenessTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetForgivenessTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetForgivenessTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetForgivenessTypeListResponse | undefined;
}

export class GetForgivenessTypeListResponse implements IGetForgivenessTypeListResponse {
    forgivenessTypes?: GetForgivenessTypeListItem[] | undefined;

    constructor(data?: IGetForgivenessTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ForgivenessTypes"])) {
                this.forgivenessTypes = [] as any;
                for (let item of _data["ForgivenessTypes"])
                    this.forgivenessTypes!.push(GetForgivenessTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetForgivenessTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetForgivenessTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.forgivenessTypes)) {
            data["ForgivenessTypes"] = [];
            for (let item of this.forgivenessTypes)
                data["ForgivenessTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetForgivenessTypeListResponse {
    forgivenessTypes?: GetForgivenessTypeListItem[] | undefined;
}

export class GetForgivenessTypeListItem implements IGetForgivenessTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetForgivenessTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetForgivenessTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetForgivenessTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetForgivenessTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetCountryListResponse implements IIResponseOfGetCountryListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetCountryListResponse | undefined;

    constructor(data?: IIResponseOfGetCountryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetCountryListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetCountryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetCountryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetCountryListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetCountryListResponse | undefined;
}

export class GetCountryListResponse implements IGetCountryListResponse {
    countryList?: GetCountryListItem[] | undefined;

    constructor(data?: IGetCountryListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["CountryList"])) {
                this.countryList = [] as any;
                for (let item of _data["CountryList"])
                    this.countryList!.push(GetCountryListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCountryListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.countryList)) {
            data["CountryList"] = [];
            for (let item of this.countryList)
                data["CountryList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCountryListResponse {
    countryList?: GetCountryListItem[] | undefined;
}

export class GetCountryListItem implements IGetCountryListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetCountryListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetCountryListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetCountryListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetCountryListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetCitiesListByCountryIDResponse implements IIResponseOfGetCitiesListByCountryIDResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetCitiesListByCountryIDResponse | undefined;

    constructor(data?: IIResponseOfGetCitiesListByCountryIDResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetCitiesListByCountryIDResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetCitiesListByCountryIDResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetCitiesListByCountryIDResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetCitiesListByCountryIDResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetCitiesListByCountryIDResponse | undefined;
}

export class GetCitiesListByCountryIDResponse implements IGetCitiesListByCountryIDResponse {
    citiesList?: GetCitiesListItem[] | undefined;

    constructor(data?: IGetCitiesListByCountryIDResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["CitiesList"])) {
                this.citiesList = [] as any;
                for (let item of _data["CitiesList"])
                    this.citiesList!.push(GetCitiesListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCitiesListByCountryIDResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCitiesListByCountryIDResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.citiesList)) {
            data["CitiesList"] = [];
            for (let item of this.citiesList)
                data["CitiesList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetCitiesListByCountryIDResponse {
    citiesList?: GetCitiesListItem[] | undefined;
}

export class GetCitiesListItem implements IGetCitiesListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetCitiesListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetCitiesListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetCitiesListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetCitiesListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDeviceTypeListResponse implements IIResponseOfGetDeviceTypeListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceTypeListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceTypeListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceTypeListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceTypeListResponse | undefined;
}

export class GetDeviceTypeListResponse implements IGetDeviceTypeListResponse {
    deviceTypeList?: GetDeviceTypeListItem[] | undefined;

    constructor(data?: IGetDeviceTypeListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceTypeList"])) {
                this.deviceTypeList = [] as any;
                for (let item of _data["DeviceTypeList"])
                    this.deviceTypeList!.push(GetDeviceTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceTypeListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceTypeListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceTypeList)) {
            data["DeviceTypeList"] = [];
            for (let item of this.deviceTypeList)
                data["DeviceTypeList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceTypeListResponse {
    deviceTypeList?: GetDeviceTypeListItem[] | undefined;
}

export class GetDeviceTypeListItem implements IGetDeviceTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetDeviceTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetDeviceTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetDeviceTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfGetDeviceLocationInBranchListResponse implements IIResponseOfGetDeviceLocationInBranchListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceLocationInBranchListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceLocationInBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceLocationInBranchListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceLocationInBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceLocationInBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceLocationInBranchListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceLocationInBranchListResponse | undefined;
}

export class GetDeviceLocationInBranchListResponse implements IGetDeviceLocationInBranchListResponse {
    deviceLocationInBranchList?: GetDeviceLocationInBranchListItem[] | undefined;

    constructor(data?: IGetDeviceLocationInBranchListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceLocationInBranchList"])) {
                this.deviceLocationInBranchList = [] as any;
                for (let item of _data["DeviceLocationInBranchList"])
                    this.deviceLocationInBranchList!.push(GetDeviceLocationInBranchListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceLocationInBranchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceLocationInBranchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceLocationInBranchList)) {
            data["DeviceLocationInBranchList"] = [];
            for (let item of this.deviceLocationInBranchList)
                data["DeviceLocationInBranchList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceLocationInBranchListResponse {
    deviceLocationInBranchList?: GetDeviceLocationInBranchListItem[] | undefined;
}

export class GetDeviceLocationInBranchListItem implements IGetDeviceLocationInBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    branchName?: string | undefined;
    branchID?: number | undefined;

    constructor(data?: IGetDeviceLocationInBranchListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
            this.branchName = _data["BranchName"];
            this.branchID = _data["BranchID"];
        }
    }

    static fromJS(data: any): GetDeviceLocationInBranchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceLocationInBranchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        data["BranchName"] = this.branchName;
        data["BranchID"] = this.branchID;
        return data; 
    }
}

export interface IGetDeviceLocationInBranchListItem {
    iD?: number | undefined;
    description?: string | undefined;
    branchName?: string | undefined;
    branchID?: number | undefined;
}

export class AddDeviceLocationInBranchRequest implements IAddDeviceLocationInBranchRequest {
    description?: string | undefined;
    branchID?: number | undefined;

    constructor(data?: IAddDeviceLocationInBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
            this.branchID = _data["BranchID"];
        }
    }

    static fromJS(data: any): AddDeviceLocationInBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceLocationInBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        data["BranchID"] = this.branchID;
        return data; 
    }
}

export interface IAddDeviceLocationInBranchRequest {
    description?: string | undefined;
    branchID?: number | undefined;
}

export class IResponseOfAddDeviceLocationInBranchResponse implements IIResponseOfAddDeviceLocationInBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceLocationInBranchResponse | undefined;

    constructor(data?: IIResponseOfAddDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddDeviceLocationInBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddDeviceLocationInBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddDeviceLocationInBranchResponse | undefined;
}

export class AddDeviceLocationInBranchResponse implements IAddDeviceLocationInBranchResponse {

    constructor(data?: IAddDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddDeviceLocationInBranchResponse {
}

export class EditDeviceLocationInBranchRequest implements IEditDeviceLocationInBranchRequest {
    iD?: number | undefined;
    branchID?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditDeviceLocationInBranchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.branchID = _data["BranchID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditDeviceLocationInBranchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeviceLocationInBranchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["BranchID"] = this.branchID;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditDeviceLocationInBranchRequest {
    iD?: number | undefined;
    branchID?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditDeviceLocationInBranchResponse implements IIResponseOfEditDeviceLocationInBranchResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditDeviceLocationInBranchResponse | undefined;

    constructor(data?: IIResponseOfEditDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditDeviceLocationInBranchResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditDeviceLocationInBranchResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditDeviceLocationInBranchResponse | undefined;
}

export class EditDeviceLocationInBranchResponse implements IEditDeviceLocationInBranchResponse {

    constructor(data?: IEditDeviceLocationInBranchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditDeviceLocationInBranchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeviceLocationInBranchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditDeviceLocationInBranchResponse {
}

export class AddForgivenessTypeRequest implements IAddForgivenessTypeRequest {
    description?: string | undefined;

    constructor(data?: IAddForgivenessTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): AddForgivenessTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddForgivenessTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        return data; 
    }
}

export interface IAddForgivenessTypeRequest {
    description?: string | undefined;
}

export class IResponseOfAddForgivenessTypeResponse implements IIResponseOfAddForgivenessTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: AddForgivenessTypeResponse | undefined;

    constructor(data?: IIResponseOfAddForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? AddForgivenessTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfAddForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfAddForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfAddForgivenessTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: AddForgivenessTypeResponse | undefined;
}

export class AddForgivenessTypeResponse implements IAddForgivenessTypeResponse {

    constructor(data?: IAddForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AddForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IAddForgivenessTypeResponse {
}

export class EditForgivenessTypeRequest implements IEditForgivenessTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IEditForgivenessTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): EditForgivenessTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EditForgivenessTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IEditForgivenessTypeRequest {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfEditForgivenessTypeResponse implements IIResponseOfEditForgivenessTypeResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: EditForgivenessTypeResponse | undefined;

    constructor(data?: IIResponseOfEditForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? EditForgivenessTypeResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfEditForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfEditForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfEditForgivenessTypeResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: EditForgivenessTypeResponse | undefined;
}

export class EditForgivenessTypeResponse implements IEditForgivenessTypeResponse {

    constructor(data?: IEditForgivenessTypeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): EditForgivenessTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditForgivenessTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IEditForgivenessTypeResponse {
}

export class IResponseOfGetHolidayTypesListResponse implements IIResponseOfGetHolidayTypesListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetHolidayTypesListResponse | undefined;

    constructor(data?: IIResponseOfGetHolidayTypesListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetHolidayTypesListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetHolidayTypesListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetHolidayTypesListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetHolidayTypesListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetHolidayTypesListResponse | undefined;
}

export class GetHolidayTypesListResponse implements IGetHolidayTypesListResponse {
    holidayTypes?: GetHolidayTypeListItem[] | undefined;

    constructor(data?: IGetHolidayTypesListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["HolidayTypes"])) {
                this.holidayTypes = [] as any;
                for (let item of _data["HolidayTypes"])
                    this.holidayTypes!.push(GetHolidayTypeListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetHolidayTypesListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetHolidayTypesListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.holidayTypes)) {
            data["HolidayTypes"] = [];
            for (let item of this.holidayTypes)
                data["HolidayTypes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetHolidayTypesListResponse {
    holidayTypes?: GetHolidayTypeListItem[] | undefined;
}

export class GetHolidayTypeListItem implements IGetHolidayTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;

    constructor(data?: IGetHolidayTypeListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.description = _data["Description"];
        }
    }

    static fromJS(data: any): GetHolidayTypeListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetHolidayTypeListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["Description"] = this.description;
        return data; 
    }
}

export interface IGetHolidayTypeListItem {
    iD?: number | undefined;
    description?: string | undefined;
}

export class IResponseOfDateTime implements IIResponseOfDateTime {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: Date | undefined;

    constructor(data?: IIResponseOfDateTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? new Date(_data["Data"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfDateTime {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfDateTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfDateTime {
    ok: boolean;
    errors?: string[] | undefined;
    data?: Date | undefined;
}

export class AddDeviceRequest implements IAddDeviceRequest {
    name?: string | undefined;
    numberDevices?: number | undefined;
    iPAddress?: string | undefined;
    deviceTypeID?: number | undefined;
    branchID?: number | undefined;
    deviceLocationInBranchID?: number | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    port?: string | undefined;

    constructor(data?: IAddDeviceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.numberDevices = _data["NumberDevices"];
            this.iPAddress = _data["IPAddress"];
            this.deviceTypeID = _data["DeviceTypeID"];
            this.branchID = _data["BranchID"];
            this.deviceLocationInBranchID = _data["DeviceLocationInBranchID"];
            this.userName = _data["UserName"];
            this.password = _data["Password"];
            this.port = _data["Port"];
        }
    }

    static fromJS(data: any): AddDeviceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddDeviceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["NumberDevices"] = this.numberDevices;
        data["IPAddress"] = this.iPAddress;
        data["DeviceTypeID"] = this.deviceTypeID;
        data["BranchID"] = this.branchID;
        data["DeviceLocationInBranchID"] = this.deviceLocationInBranchID;
        data["UserName"] = this.userName;
        data["Password"] = this.password;
        data["Port"] = this.port;
        return data; 
    }
}

export interface IAddDeviceRequest {
    name?: string | undefined;
    numberDevices?: number | undefined;
    iPAddress?: string | undefined;
    deviceTypeID?: number | undefined;
    branchID?: number | undefined;
    deviceLocationInBranchID?: number | undefined;
    userName?: string | undefined;
    password?: string | undefined;
    port?: string | undefined;
}

export class IResponseOfGetDeviceUserLogResponse implements IIResponseOfGetDeviceUserLogResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceUserLogResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceUserLogResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceUserLogResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceUserLogResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceUserLogResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceUserLogResponse | undefined;
}

export class GetDeviceUserLogResponse implements IGetDeviceUserLogResponse {
    deviceUserLogList?: GetDeviceUserLogItem[] | undefined;

    constructor(data?: IGetDeviceUserLogResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceUserLogList"])) {
                this.deviceUserLogList = [] as any;
                for (let item of _data["DeviceUserLogList"])
                    this.deviceUserLogList!.push(GetDeviceUserLogItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceUserLogResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceUserLogResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceUserLogList)) {
            data["DeviceUserLogList"] = [];
            for (let item of this.deviceUserLogList)
                data["DeviceUserLogList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceUserLogResponse {
    deviceUserLogList?: GetDeviceUserLogItem[] | undefined;
}

export class GetDeviceUserLogItem implements IGetDeviceUserLogItem {
    firsName?: string | undefined;
    lastName?: string | undefined;
    personalNumber?: string | undefined;
    recordTime?: Date | undefined;
    userIDInDevice?: number | undefined;
    machineNumber?: number | undefined;
    verifyMode?: number | undefined;
    isActive?: boolean | undefined;

    constructor(data?: IGetDeviceUserLogItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firsName = _data["FirsName"];
            this.lastName = _data["LastName"];
            this.personalNumber = _data["PersonalNumber"];
            this.recordTime = _data["RecordTime"] ? new Date(_data["RecordTime"].toString()) : <any>undefined;
            this.userIDInDevice = _data["UserIDInDevice"];
            this.machineNumber = _data["MachineNumber"];
            this.verifyMode = _data["VerifyMode"];
            this.isActive = _data["IsActive"];
        }
    }

    static fromJS(data: any): GetDeviceUserLogItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceUserLogItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["FirsName"] = this.firsName;
        data["LastName"] = this.lastName;
        data["PersonalNumber"] = this.personalNumber;
        data["RecordTime"] = this.recordTime ? this.recordTime.toISOString() : <any>undefined;
        data["UserIDInDevice"] = this.userIDInDevice;
        data["MachineNumber"] = this.machineNumber;
        data["VerifyMode"] = this.verifyMode;
        data["IsActive"] = this.isActive;
        return data; 
    }
}

export interface IGetDeviceUserLogItem {
    firsName?: string | undefined;
    lastName?: string | undefined;
    personalNumber?: string | undefined;
    recordTime?: Date | undefined;
    userIDInDevice?: number | undefined;
    machineNumber?: number | undefined;
    verifyMode?: number | undefined;
    isActive?: boolean | undefined;
}

export class IResponseOfGetDeviceListResponse implements IIResponseOfGetDeviceListResponse {
    ok!: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceListResponse | undefined;

    constructor(data?: IIResponseOfGetDeviceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ok = _data["Ok"];
            if (Array.isArray(_data["Errors"])) {
                this.errors = [] as any;
                for (let item of _data["Errors"])
                    this.errors!.push(item);
            }
            this.data = _data["Data"] ? GetDeviceListResponse.fromJS(_data["Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IResponseOfGetDeviceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseOfGetDeviceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Ok"] = this.ok;
        if (Array.isArray(this.errors)) {
            data["Errors"] = [];
            for (let item of this.errors)
                data["Errors"].push(item);
        }
        data["Data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IIResponseOfGetDeviceListResponse {
    ok: boolean;
    errors?: string[] | undefined;
    data?: GetDeviceListResponse | undefined;
}

export class GetDeviceListResponse implements IGetDeviceListResponse {
    deviceList?: GetDeviceListItem[] | undefined;

    constructor(data?: IGetDeviceListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["DeviceList"])) {
                this.deviceList = [] as any;
                for (let item of _data["DeviceList"])
                    this.deviceList!.push(GetDeviceListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDeviceListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deviceList)) {
            data["DeviceList"] = [];
            for (let item of this.deviceList)
                data["DeviceList"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetDeviceListResponse {
    deviceList?: GetDeviceListItem[] | undefined;
}

export class GetDeviceListItem implements IGetDeviceListItem {
    iD?: number | undefined;
    iPAddress?: string | undefined;
    lastSyncDate?: Date | undefined;
    branch?: string | undefined;
    locationInBranch?: string | undefined;
    state?: number | undefined;

    constructor(data?: IGetDeviceListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.iD = _data["ID"];
            this.iPAddress = _data["IPAddress"];
            this.lastSyncDate = _data["LastSyncDate"] ? new Date(_data["LastSyncDate"].toString()) : <any>undefined;
            this.branch = _data["Branch"];
            this.locationInBranch = _data["LocationInBranch"];
            this.state = _data["State"];
        }
    }

    static fromJS(data: any): GetDeviceListItem {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ID"] = this.iD;
        data["IPAddress"] = this.iPAddress;
        data["LastSyncDate"] = this.lastSyncDate ? this.lastSyncDate.toISOString() : <any>undefined;
        data["Branch"] = this.branch;
        data["LocationInBranch"] = this.locationInBranch;
        data["State"] = this.state;
        return data; 
    }
}

export interface IGetDeviceListItem {
    iD?: number | undefined;
    iPAddress?: string | undefined;
    lastSyncDate?: Date | undefined;
    branch?: string | undefined;
    locationInBranch?: string | undefined;
    state?: number | undefined;
}

export class IZKEM implements IIZKEM {

    constructor(data?: IIZKEM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IZKEM {
        data = typeof data === 'object' ? data : {};
        let result = new IZKEM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export interface IIZKEM {
}

export class UserInfo implements IUserInfo {
    machineNumber?: number | undefined;
    enrollNumber?: string | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.machineNumber = _data["MachineNumber"];
            this.enrollNumber = _data["EnrollNumber"];
            this.name = _data["Name"];
            this.fingerIndex = _data["FingerIndex"];
            this.tmpData = _data["TmpData"];
            this.privelage = _data["Privelage"];
            this.password = _data["Password"];
            this.enabled = _data["Enabled"];
            this.iFlag = _data["iFlag"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["MachineNumber"] = this.machineNumber;
        data["EnrollNumber"] = this.enrollNumber;
        data["Name"] = this.name;
        data["FingerIndex"] = this.fingerIndex;
        data["TmpData"] = this.tmpData;
        data["Privelage"] = this.privelage;
        data["Password"] = this.password;
        data["Enabled"] = this.enabled;
        data["iFlag"] = this.iFlag;
        return data; 
    }
}

export interface IUserInfo {
    machineNumber?: number | undefined;
    enrollNumber?: string | undefined;
    name?: string | undefined;
    fingerIndex?: number | undefined;
    tmpData?: string | undefined;
    privelage?: number | undefined;
    password?: string | undefined;
    enabled?: boolean | undefined;
    iFlag?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

}